sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/m/MessageBox",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/core/format/DateFormat"
], function (Controller, MessageBox, MessageToast, JSONModel, Filter, FilterOperator, DateFormat) {
    "use strict";

    return Controller.extend("com.tableentry.tablestructure.controller.Table_Entry", {
        onInit: function () {
            const oData = {
                draftCount: 0,
                sentBackCount: 1,
                rejectedCount: 1,
                inProgressCount: 2,
                allCount: 4,
                editable: false,
                filter: {
                    requestNo: "",
                    createdBy: "",
                    createdOn: "",
                    status: ""
                },
                statusItems: [
                    { key: "", text: "All" },
                    { key: "Draft", text: "Draft" },
                    { key: "Send Back", text: "Send Back" },
                    { key: "Rejected", text: "Rejected" },
                    { key: "Pending Request", text: "Pending Request" }
                ],
                requestTypes: [
                    { key: "TYPE1", text: "Type 1 Request" },
                    { key: "TYPE2", text: "Type 2 Request" },
                    { key: "TYPE3", text: "Type 3 Request" }
                ],
                newRequest: {
                    type: "",
                    description: "",
                    file: null
                },
                uploadedFiles: [
                    {
                        fileName: "PDF for justification - Email"
                    }
                ],
                uploadedFilesCount: 1,
                requests: [
                    { 
                        requestNo: "RM00000001",
                        createdBy: "Buyer",
                        createdOn: "Feb 02, 2025",
                        status: "Send Back",
                        remarks: "-",
                        pendingWith: "-",
                        requestAging: "15 Days",
                        referenceNo: "RM00000001",
                        division: "Division 1",
                        dcnrForm: "Form 123",
                        standardReason: "Price Change",
                        salesGroup: "Group A",
                        creatorComment: "Initial request",
                        dcnrTo: "Finance",
                        attachments: []
                    },
                    { 
                        requestNo: "RM00000002",
                        createdBy: "Buyer",
                        createdOn: "Feb 02, 2025",
                        status: "Send Back",
                        remarks: "-",
                        pendingWith: "-",
                        requestAging: "15 Days",
                        referenceNo: "RM00000002",
                        division: "Division 1",
                        dcnrForm: "Form 123",
                        standardReason: "Price Change",
                        salesGroup: "Group A",
                        creatorComment: "Initial request",
                        dcnrTo: "Finance",
                        attachments: []
                    },
                    { 
                        requestNo: "RM00000003",
                        createdBy: "Buyer",
                        createdOn: "Feb 02, 2025",
                        status: "Send Back",
                        remarks: "-",
                        pendingWith: "-",
                        requestAging: "15 Days",
                        referenceNo: "RM00000003",
                        division: "Division 1",
                        dcnrForm: "Form 123",
                        standardReason: "Price Change",
                        salesGroup: "Group A",
                        creatorComment: "Initial request",
                        dcnrTo: "Finance",
                        attachments: []
                    },
                    { 
                        requestNo: "RM00000004",
                        createdBy: "Buyer",
                        createdOn: "Feb 02, 2025",
                        status: "Send Back",
                        remarks: "-",
                        pendingWith: "-",
                        requestAging: "15 Days",
                        referenceNo: "RM00000004",
                        division: "Division 1",
                        dcnrForm: "Form 123",
                        standardReason: "Price Change",
                        salesGroup: "Group A",
                        creatorComment: "Initial request",
                        dcnrTo: "Finance",
                        attachments: []
                    },
                    { 
                        requestNo: "RM00000005",
                        createdBy: "Buyer",
                        createdOn: "Feb 02, 2025",
                        status: "Pending Request",
                        remarks: "-",
                        pendingWith: "user3@pellme.com",
                        requestAging: "15 Days",
                        referenceNo: "RM00000005",
                        division: "Division 2",
                        dcnrForm: "Form 456",
                        standardReason: "New Product",
                        salesGroup: "Group B",
                        creatorComment: "Urgent request",
                        dcnrTo: "Sales",
                        attachments: []
                    }
                ],
                approvers: [
                    {
                        role1: "Approver 1",
                        approver1: "ayush.jha@sumo",
                        role2: "Alternate Approver 1",
                        approver2: "tanu.singh@sumo"
                    },
                    {
                        role1: "Approver 2",
                        approver1: "ayushi.khanolkar@sumo",
                        role2: "Alternate Approver 2",
                        approver2: "aakib.mohd@sumo"
                    },
                    {
                        role1: "Approver 3",
                        approver1: "yugal.kishore@sumo",
                        role2: "Alternate Approver 3",
                        approver2: "sumit.jhadjiyal@sumo"
                    }
                ],
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Rath Created a Request",
                        text: "Please go to the evaluate.",
                        userName: "Ankit Rath",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    },
                    {
                        dateTime: "7/14/2016 at 12:41 AM",
                        title: "Sumit added a note [Approved]",
                        text: "Done.",
                        userName: "Sumit",
                        userPicture: "https://ui-avatars.com/api/?name=Sumit"
                    },
                    {
                        dateTime: "7/14/2016 at 11:14 PM",
                        title: "Yugal added a note [Approved]",
                        text: "Ok.",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    }
                ],
                priceDetails: [
                    {
                        material: "FC88B7866",
                        priceList: "04",
                        priceListDescription: "Price List 04",
                        uom: "EA",
                        indicativeMRP: "41.00",
                        startDate: "13-05-2025",
                        endDate: "24-07-2025",
                        defaultPrice: "X"
                    },
                    {
                        material: "FC88B7866",
                        priceList: "04",
                        priceListDescription: "Price List 04",
                        uom: "EA",
                        indicativeMRP: "41.00",
                        startDate: "18-05-2025",
                        endDate: "4-07-2025",
                        defaultPrice: "X"
                    },
                    {
                        material: "FC88B7866",
                        priceList: "04",
                        priceListDescription: "Price List 04",
                        uom: "EA",
                        indicativeMRP: "42.00",
                        startDate: "23-05-2025",
                        endDate: "2-07-2025",
                        defaultPrice: "X"
                    },
                    {
                        material: "FC88B7866",
                        priceList: "04",
                        priceListDescription: "Price List 04",
                        uom: "EA",
                        indicativeMRP: "71.09",
                        startDate: "3-05-2025",
                        endDate: "1-07-2025",
                        defaultPrice: "X"
                    }
                ],
                selectedRequest: {}
            };

            const oModel = new JSONModel(oData);
            this.getView().setModel(oModel);
            this._updateCounts();

            // Initialize the router
            this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            this.oRouter.attachRouteMatched(this.onRouteMatched, this);
        },

        onRouteMatched: function(oEvent) {
            const sRouteName = oEvent.getParameter("name");
            MessageToast.show(`Navigated to route: ${sRouteName}`);
            // Add logic here if you need to handle specific routes
            if (sRouteName === "RequestForm") {
                // This logic will be handled in onCreateRequest for opening in a new tab
            }
        },

        onTilePress: function(oEvent) {
            const sHeader = oEvent.getSource().getHeader();
            const oTable = this.byId("dashboardTable");
            const oBinding = oTable.getBinding("items");
            
            let aFilters = [];
            switch(sHeader) {
                case "My Draft Requests":
                    aFilters.push(new Filter("status", FilterOperator.EQ, "Draft"));
                    break;
                case "Sent Back Requests":
                    aFilters.push(new Filter("status", FilterOperator.EQ, "Send Back"));
                    break;
                case "Rejected Requests":
                    aFilters.push(new Filter("status", FilterOperator.EQ, "Rejected"));
                    break;
                case "In-Progress Requests":
                    aFilters.push(new Filter("status", FilterOperator.EQ, "Pending Request"));
                    break;
            }
            
            oBinding.filter(aFilters);
            MessageToast.show(`Filtered by ${sHeader}`);
        },

        onFilterChange: function() {
            const oTable = this.byId("dashboardTable");
            const oBinding = oTable.getBinding("items");
            const oModel = this.getView().getModel();
            const oFilters = oModel.getProperty("/filter");
            
            let aFilters = [];
            
            if (oFilters.requestNo) {
                aFilters.push(new Filter("requestNo", FilterOperator.Contains, oFilters.requestNo));
            }
            
            if (oFilters.createdBy) {
                aFilters.push(new Filter("createdBy", FilterOperator.Contains, oFilters.createdBy));
            }
            
            if (oFilters.createdOn) {
                aFilters.push(new Filter("createdOn", FilterOperator.EQ, oFilters.createdOn));
            }
            
            if (oFilters.status) {
                aFilters.push(new Filter("status", FilterOperator.EQ, oFilters.status));
            }
            
            oBinding.filter(aFilters);
        },

        onClearFilters: function() {
            const oModel = this.getView().getModel();
            oModel.setProperty("/filter", {
                requestNo: "",
                createdBy: "",
                createdOn: "",
                status: ""
            });
            
            this.onFilterChange();
            MessageToast.show("Filters cleared");
        },

        onCreatePress: function() {
            this.getView().getModel().setProperty("/newRequest", {
                type: "",
                description: "",
                file: null
            });
            
            this.byId("createRequestDialog").open();
        },

        onCreateRequest: function() {
            const oModel = this.getView().getModel();
            const oNewRequest = oModel.getProperty("/newRequest");
            const aUploadedFiles = oModel.getProperty("/uploadedFiles");
            
            const aRequests = oModel.getProperty("/requests");
            const iNewId = aRequests.length + 1;
            const sNewRequestNo = "RM" + String(iNewId).padStart(7, "0");
            
            const oDateFormat = DateFormat.getDateInstance({style: "medium"});
            const sCurrentDate = oDateFormat.format(new Date());
            
            const oRequest = {
                requestNo: sNewRequestNo,
                createdBy: "Current User",
                createdOn: sCurrentDate,
                status: "Draft",
                remarks: oNewRequest.description || "-",
                pendingWith: "-",
                requestAging: "0 Days",
                referenceNo: sNewRequestNo,
                division: "",
                dcnrForm: "",
                standardReason: "",
                salesGroup: "",
                creatorComment: "",
                dcnrTo: "",
                attachments: aUploadedFiles.map(file => ({ fileName: file.fileName }))
            };
            
            aRequests.unshift(oRequest);
            oModel.setProperty("/requests", aRequests);
            
            this._updateCounts();
            
            this.byId("createRequestDialog").close();
            MessageToast.show("Request created successfully");
            
            oModel.setProperty("/selectedRequest", JSON.parse(JSON.stringify(oRequest)));
            
            // Navigate to RequestForm route
            const oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.navTo("RequestForm");

            // Open the request details in a new tab
            const oNewWindow = window.open("#/requestForm", "_blank");
            
            if (oNewWindow) {
                oNewWindow.document.write(`
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Price Requisition</title>
                        <script src="https://sapui5.hana.ondemand.com/resources/sap-ui-core.js"
                                id="sap-ui-bootstrap"
                                data-sap-ui-libs="sap.m, sap.ui.layout, sap.suite.ui.commons"
                                data-sap-ui-theme="sap_fiori_3">
                        </script>
                        <style>
                            .sapUiBody {
                                padding: 1rem;
                            }
                            .mandatoryLabel {
                                color: red;
                            }
                            .sapUiSmallMarginTop {
                                margin-top: 0.5rem;
                            }
                        </style>
                    </head>
                    <body class="sapUiBody">
                        <div id="content"></div>
                        <script>
                            sap.ui.getCore().attachInit(function() {
                                // Define the data model for the new tab
                                const oData = {
                                    editable: false,
                                    selectedRequest: ${JSON.stringify(oRequest)},
                                    approvers: ${JSON.stringify(oModel.getProperty("/approvers"))},
                                    priceDetails: ${JSON.stringify(oModel.getProperty("/priceDetails"))},
                                    timelineItems: ${JSON.stringify(oModel.getProperty("/timelineItems"))}
                                };
                                const oModel = new sap.ui.model.json.JSONModel(oData);
                                sap.ui.getCore().setModel(oModel);

                                // Create the panel structure
                                const oPanel = new sap.m.Panel({
                                    headerText: "Price Requisition",
                                    content: [
                                        new sap.m.Toolbar({
                                            content: [
                                                new sap.m.ToolbarSpacer(),
                                                new sap.m.Button({
                                                    icon: "sap-icon://save",
                                                    text: "Save",
                                                    type: "Accept",
                                                    tooltip: "Save Request",
                                                    press: function() {
                                                        const oSelectedRequest = oModel.getProperty("/selectedRequest");
                                                        sap.m.MessageToast.show("Request saved: " + oSelectedRequest.requestNo);
                                                    }
                                                }),
                                                new sap.m.Button({
                                                    icon: "sap-icon://print",
                                                    text: "Print",
                                                    type: "Default",
                                                    tooltip: "Print Request",
                                                    press: function() {
                                                        sap.m.MessageToast.show("Printing request...");
                                                    }
                                                }),
                                                new sap.m.Button({
                                                    icon: "sap-icon://decline",
                                                    text: "Exit",
                                                    type: "Reject",
                                                    tooltip: "Close Dialog",
                                                    press: function() {
                                                        window.close();
                                                    }
                                                }),
                                                new sap.m.Button({
                                                    icon: "sap-icon://edit",
                                                    text: "Edit",
                                                    type: "Default",
                                                    tooltip: "Toggle Edit Mode",
                                                    press: function() {
                                                        const bEditable = !oModel.getProperty("/editable");
                                                        oModel.setProperty("/editable", bEditable);
                                                        sap.m.MessageToast.show(bEditable ? "Edit mode activated" : "Edit mode deactivated");
                                                    }
                                                })
                                            ]
                                        }),
                                        new sap.ui.layout.form.SimpleForm({
                                            layout: "ResponsiveGridLayout",
                                            editable: "{/editable}",
                                            content: [
                                                new sap.m.Panel({
                                                    headerText: "Price Requisition Details",
                                                    expandable: true,
                                                    expanded: true,
                                                    content: [
                                                        new sap.m.Label({ text: "Fields marked with * are mandatory", design: "Bold", class: "mandatoryLabel sapUiSmallMarginTop" }),
                                                        new sap.m.Label({ text: "Reference No:*" }),
                                                        new sap.m.Input({ value: "{/selectedRequest/referenceNo}" }),
                                                        new sap.m.Label({ text: "Division:*" }),
                                                        new sap.m.Input({ value: "{/selectedRequest/division}" }),
                                                        new sap.m.Label({ text: "Created By:" }),
                                                        new sap.m.Text({ text: "{/selectedRequest/createdBy}" }),
                                                        new sap.m.Label({ text: "Created Date:" }),
                                                        new sap.m.Text({ text: "{/selectedRequest/createdOn}" }),
                                                        new sap.m.Label({ text: "DCNR# form:" }),
                                                        new sap.m.Input({ value: "{/selectedRequest/dcnrForm}" }),
                                                        new sap.m.Label({ text: "Status of the Request:" }),
                                                        new sap.m.Text({ text: "{/selectedRequest/status}" }),
                                                        new sap.m.Label({ text: "Standard Reason:" }),
                                                        new sap.m.Input({ value: "{/selectedRequest/standardReason}" }),
                                                        new sap.m.Label({ text: "Sales Group:" }),
                                                        new sap.m.Input({ value: "{/selectedRequest/salesGroup}" }),
                                                        new sap.m.Label({ text: "Comment by Creator:" }),
                                                        new sap.m.Input({ value: "{/selectedRequest/creatorComment}" }),
                                                        new sap.m.Label({ text: "DCNR to:" }),
                                                        new sap.m.Input({ value: "{/selectedRequest/dcnrTo}" })
                                                    ]
                                                })
                                            ]
                                        }),
                                        new sap.m.Panel({
                                            headerText: "Uploaded Attachments",
                                            expandable: true,
                                            expanded: true,
                                            class: "sapUiSmallMarginTop",
                                            content: [
                                                new sap.m.Table({
                                                    items: "{/selectedRequest/attachments}",
                                                    columns: [
                                                        new sap.m.Column({ header: new sap.m.Text({ text: "Attachment" }) }),
                                                        new sap.m.Column({ header: new sap.m.Text({ text: "Action" }) })
                                                    ],
                                                    items: {
                                                        path: "/selectedRequest/attachments",
                                                        template: new sap.m.ColumnListItem({
                                                            cells: [
                                                                new sap.m.Text({ text: "{fileName}" }),
                                                                new sap.m.Button({
                                                                    icon: "sap-icon://download",
                                                                    tooltip: "Download",
                                                                    press: function(oEvent) {
                                                                        const oItem = oEvent.getSource().getBindingContext().getObject();
                                                                        sap.m.MessageToast.show("Downloading file: " + oItem.fileName);
                                                                    }
                                                                })
                                                            ]
                                                        })
                                                    }
                                                })
                                            ]
                                        }),
                                        new sap.m.Panel({
                                            headerText: "Division Section Table",
                                            expandable: true,
                                            expanded: true,
                                            class: "sapUiSmallMarginTop",
                                            content: [
                                                new sap.m.Table({
                                                    items: "{/approvers}",
                                                    columns: [
                                                        new sap.m.Column({ header: new sap.m.Text({ text: "Role" }) }),
                                                        new sap.m.Column({ header: new sap.m.Text({ text: "Approver" }) }),
                                                        new sap.m.Column({ header: new sap.m.Text({ text: "Role" }) }),
                                                        new sap.m.Column({ header: new sap.m.Text({ text: "Approver" }) })
                                                    ],
                                                    items: {
                                                        path: "/approvers",
                                                        template: new sap.m.ColumnListItem({
                                                            cells: [
                                                                new sap.m.Text({ text: "{role1}" }),
                                                                new sap.m.Text({ text: "{approver1}" }),
                                                                new sap.m.Text({ text: "{role2}" }),
                                                                new sap.m.Text({ text: "{approver2}" })
                                                            ]
                                                        })
                                                    }
                                                })
                                            ]
                                        }),
                                        new sap.m.IconTabBar({
                                            expandable: false,
                                            class: "sapUiSmallMarginTop",
                                            items: [
                                                new sap.m.IconTabFilter({
                                                    text: "Price Details",
                                                    key: "priceDetails",
                                                    content: [
                                                        new sap.m.Table({
                                                            items: "{/priceDetails}",
                                                            columns: [
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "Material" }) }),
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "Price List" }) }),
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "Price List Description" }) }),
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "UoM" }) }),
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "Indicative MRP" }) }),
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "Start Date" }) }),
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "End Date" }) }),
                                                                new sap.m.Column({ header: new sap.m.Text({ text: "Default Price for Lot Material" }) })
                                                            ],
                                                            items: {
                                                                path: "/priceDetails",
                                                                template: new sap.m.ColumnListItem({
                                                                    cells: [
                                                                        new sap.m.Text({ text: "{material}" }),
                                                                        new sap.m.Text({ text: "{priceList}" }),
                                                                        new sap.m.Text({ text: "{priceListDescription}" }),
                                                                        new sap.m.Text({ text: "{uom}" }),
                                                                        new sap.m.Text({ text: "{indicativeMRP}" }),
                                                                        new sap.m.Text({ text: "{startDate}" }),
                                                                        new sap.m.Text({ text: "{endDate}" }),
                                                                        new sap.m.Text({ text: "{defaultPrice}" })
                                                                    ]
                                                                })
                                                            }
                                                        })
                                                    ]
                                                }),
                                                new sap.m.IconTabFilter({
                                                    text: "Timeline",
                                                    key: "timeline",
                                                    content: [
                                                        new sap.suite.ui.commons.Timeline({
                                                            enableScroll: true,
                                                            content: {
                                                                path: "/timelineItems",
                                                                template: new sap.suite.ui.commons.TimelineItem({
                                                                    dateTime: "{dateTime}",
                                                                    title: "{title}",
                                                                    text: "{text}",
                                                                    userName: "{userName}",
                                                                    userPicture: "{userPicture}",
                                                                    icon: "sap-icon://history"
                                                                })
                                                            }
                                                        })
                                                    ]
                                                })
                                            ],
                                            select: function(oEvent) {
                                                const sKey = oEvent.getParameter("key");
                                                sap.m.MessageToast.show("Selected details tab: " + sKey);
                                            }
                                        }),
                                        new sap.m.HBox({
                                            justifyContent: "End",
                                            items: [
                                                new sap.m.Button({
                                                    text: "Submit",
                                                    type: "Emphasized",
                                                    visible: "{/editable}",
                                                    press: function() {
                                                        const oSelectedRequest = oModel.getProperty("/selectedRequest");
                                                        oSelectedRequest.status = "Pending Request";
                                                        oSelectedRequest.pendingWith = "next-approver@example.com";
                                                        oModel.setProperty("/selectedRequest", oSelectedRequest);
                                                        oModel.setProperty("/editable", false);
                                                        sap.m.MessageToast.show("Request submitted successfully");
                                                    }
                                                }),
                                                new sap.m.Button({
                                                    text: "Close",
                                                    type: "Reject",
                                                    press: function() {
                                                        window.close();
                                                    }
                                                })
                                            ]
                                        })
                                    ]
                                }).placeAt("content");
                            });
                        </script>
                    </body>
                    </html>
                `);
            } else {
                MessageToast.show("Unable to open new tab. Please allow pop-ups for this site.");
            }
        },

        onCancelCreate: function() {
            this.byId("createRequestDialog").close();
        },

        onItemPress: function(oEvent) {
            const oItem = oEvent.getParameter("listItem");
            const oContext = oItem.getBindingContext();
            const oData = oContext.getObject();
            
            const oSelectedRequest = JSON.parse(JSON.stringify(oData));
            this.getView().getModel().setProperty("/selectedRequest", oSelectedRequest);
            
            this.getView().byId("requestDetailsDialog").open();
        },

        onSaveRequest: function() {
            const oModel = this.getView().getModel();
            const oSelectedRequest = oModel.getProperty("/selectedRequest");
            
            const aRequests = oModel.getProperty("/requests");
            const iIndex = aRequests.findIndex(req => req.requestNo === oSelectedRequest.requestNo);
            if (iIndex >= 0) {
                aRequests[iIndex] = oSelectedRequest;
                oModel.setProperty("/requests", aRequests);
            }
            
            MessageToast.show("Request saved successfully");
        },

        onSubmitRequest: function() {
            const oModel = this.getView().getModel();
            const oSelectedRequest = oModel.getProperty("/selectedRequest");
            
            oSelectedRequest.status = "Pending Request";
            oSelectedRequest.pendingWith = "next-approver@example.com";
            
            const aRequests = oModel.getProperty("/requests");
            const iIndex = aRequests.findIndex(req => req.requestNo === oSelectedRequest.requestNo);
            if (iIndex >= 0) {
                aRequests[iIndex] = oSelectedRequest;
                oModel.setProperty("/requests", aRequests);
            }
            
            this._updateCounts();
            oModel.setProperty("/editable", false);
            MessageToast.show("Request submitted successfully");
            this.getView().byId("requestDetailsDialog").close();
        },

        onPrintRequest: function() {
            MessageToast.show("Printing request...");
        },

        onCloseRequest: function() {
            const oModel = this.getView().getModel();
            oModel.setProperty("/editable", false);
            this.getView().byId("requestDetailsDialog").close();
        },

        onEditRequest: function() {
            const oModel = this.getView().getModel();
            const bEditable = !oModel.getProperty("/editable");
            oModel.setProperty("/editable", bEditable);
            MessageToast.show(bEditable ? "Edit mode activated" : "Edit mode deactivated");
        },

        handleUploadComplete: function(oEvent) {
            const sResponse = oEvent.getParameters().response;
            const iHttpStatusCode = parseInt(/\d{3}/.exec(sResponse) ? /\d{3}/.exec(sResponse)[0] : 0);
            const sMessage = iHttpStatusCode === 200 ? "File upload complete (Success)" : "File upload failed (Error)";
            MessageToast.show(sMessage);
        },

        handleValueChange: function(oEvent) {
            const sFileName = oEvent.getParameter("newValue");
            const oModel = this.getView().getModel();
            const aUploadedFiles = oModel.getProperty("/uploadedFiles");
            aUploadedFiles.push({ fileName: sFileName });
            oModel.setProperty("/uploadedFiles", aUploadedFiles);
            oModel.setProperty("/uploadedFilesCount", aUploadedFiles.length);
            MessageToast.show("File selected: " + sFileName);
        },

        onDownloadFile: function(oEvent) {
            const oItem = oEvent.getSource().getBindingContext().getObject();
            MessageToast.show("Downloading file: " + oItem.fileName);
        },

        handleTypeMissmatch: function(oEvent) {
            const aFileTypes = oEvent.getSource().getFileType().map(sType => "*." + sType);
            MessageToast.show(`The file type *.${oEvent.getParameter("fileType")} is not supported. Choose one of the following types: ${aFileTypes.join(", ")}`);
        },

        _updateCounts: function() {
            const oModel = this.getView().getModel();
            const aRequests = oModel.getProperty("/requests");
            
            const oCounts = {
                draftCount: aRequests.filter(r => r.status === "Draft").length,
                sentBackCount: aRequests.filter(r => r.status === "Send Back").length,
                rejectedCount: aRequests.filter(r => r.status === "Rejected").length,
                inProgressCount: aRequests.filter(r => r.status === "Pending Request").length,
                allCount: aRequests.length
            };
            
            oModel.setProperty("/draftCount", oCounts.draftCount);
            oModel.setProperty("/sentBackCount", oCounts.sentBackCount);
            oModel.setProperty("/rejectedCount", oCounts.rejectedCount);
            oModel.setProperty("/inProgressCount", oCounts.inProgressCount);
            oModel.setProperty("/allCount", oCounts.allCount);
        },

        onTabSelect: function(oEvent) {
            const sKey = oEvent.getParameter("key");
            const oTable = this.byId("dashboardTable");
            const oBinding = oTable.getBinding("items");
            oBinding.filter([]);
            MessageToast.show(`Selected tab: ${sKey}`);
        },

        onDetailsTabSelect: function(oEvent) {
            const sKey = oEvent.getParameter("key");
            MessageToast.show(`Selected details tab: ${sKey}`);
        }
    });
});
